src\api\aiService.js
/* code of this file */

import apiClient from './apiClient';

export const aiService = {
  summarizeProject: (projectData) => apiClient.post('/ai/summarize', { projectData }),

  ask: (question, context) => apiClient.post('/ai/ask', { question, context }),
};



src\api\apiClient.js
/* code of this file */

import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

apiClient.interceptors.response.use(
  (response) => response.data,
  (error) => {
    const message = error.response?.data?.message || error.message;
    console.error(`API Error: ${message}`);
    return Promise.reject(new Error(message));
  }
);

export default apiClient;



src\api\projectService.js
/* code of this file */

import apiClient from './apiClient';

export const projectService = {
  getAll: (populateTaskCount = false) =>
    apiClient.get(`/projects?populateTaskCount=${populateTaskCount}`),

  getById: (id, populateTasks = false) =>
    apiClient.get(`/projects/${id}?populateTasks=${populateTasks}`),

  create: (data) => apiClient.post('/projects', data),

  update: (id, data) => apiClient.put(`/projects/${id}`, data),

  delete: (id) => apiClient.delete(`/projects/${id}`),

  createTask: (projectId, data) => apiClient.post(`/projects/${projectId}/tasks`, data),
};



src\api\taskService.js
/* code of this file */

import apiClient from './apiClient';

export const taskService = {
  update: (id, data) => apiClient.put(`/tasks/${id}`, data),

  delete: (id) => apiClient.delete(`/tasks/${id}`),
};



src\components\ai\AIPanel.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { X, Send, Sparkles } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';
import { aiService } from '../../api/aiService';

export default function AIPanel({ projectContext, onClose }) {
  const [messages, setMessages] = useState([
    {
      id: 'init',
      type: 'ai',
      content:
        "Hello! Ask me anything about this project, like 'what are the next steps?' or 'summarize the tasks in progress'.",
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isLoading]);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = { id: Date.now().toString(), type: 'user', content: input };
    setMessages((prev) => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setIsLoading(true);

    try {
      const context = JSON.stringify({
        name: projectContext.name,
        description: projectContext.description,
        tasks: projectContext.tasks,
      });
      const result = await aiService.ask(currentInput, context);
      const aiMessage = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: result.answer,
      };
      setMessages((prev) => [...prev, aiMessage]);
    } catch (error) {
      console.error('Failed to get AI response:', error);
      const errorMessage = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: 'Sorry, I encountered an error. Please try again.',
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, x: 400 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: 400 }}
        className="fixed bottom-0 right-0 top-0 w-full sm:w-96 bg-white border-l border-slate-200 shadow-strong flex flex-col z-40"
      >
        <div className="flex items-center justify-between p-4 border-b border-slate-200 bg-gradient-to-r from-blue-50 to-cyan-50">
          <div className="flex items-center gap-2.5">
            <div className="w-9 h-9 rounded-xl bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center shadow-md">
              <Sparkles className="w-5 h-5 text-white" />
            </div>
            <h3 className="font-bold text-slate-900">AI Assistant</h3>
          </div>
          <motion.button
            whileHover={{ rotate: 90, scale: 1.1 }}
            onClick={onClose}
            className="p-1.5 hover:bg-white/60 rounded-lg transition-colors"
          >
            <X className="w-5 h-5 text-slate-600" />
          </motion.button>
        </div>

        <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-slate-50/50">
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[85%] px-4 py-3 rounded-2xl whitespace-pre-wrap shadow-sm ${
                  message.type === 'user'
                    ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white'
                    : 'bg-white text-slate-900 border border-slate-200'
                }`}
              >
                <p className="text-sm leading-relaxed">{message.content}</p>
              </div>
            </motion.div>
          ))}
          {isLoading && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="flex justify-start">
              <div className="bg-white border border-slate-200 px-4 py-3 rounded-2xl shadow-sm">
                <div className="flex gap-1">
                  <motion.div
                    animate={{ y: [0, -6, 0] }}
                    transition={{ duration: 0.6, repeat: Infinity }}
                    className="w-2 h-2 bg-slate-400 rounded-full"
                  />
                  <motion.div
                    animate={{ y: [0, -6, 0] }}
                    transition={{ duration: 0.6, repeat: Infinity, delay: 0.1 }}
                    className="w-2 h-2 bg-slate-400 rounded-full"
                  />
                  <motion.div
                    animate={{ y: [0, -6, 0] }}
                    transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                    className="w-2 h-2 bg-slate-400 rounded-full"
                  />
                </div>
              </div>
            </motion.div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <form onSubmit={handleSendMessage} className="p-4 border-t border-slate-200 bg-white">
          <div className="flex gap-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Ask about this project..."
              className="flex-1 px-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm text-slate-900"
              disabled={isLoading}
            />
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              type="submit"
              disabled={isLoading || !input.trim()}
              className="p-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:shadow-md transition-all disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-5 h-5" />
            </motion.button>
          </div>
        </form>
      </motion.div>
    </AnimatePresence>
  );
}



src\components\ai\ColumnSummarizer.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { Sparkles, X } from 'lucide-react';
import { useState } from 'react';
import { aiService } from '../../api/aiService';

export default function ColumnSummarizer({ columnTitle, tasks, onClose }) {
  const [summary, setSummary] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleSummarize = async () => {
    setIsLoading(true);
    setError(null);
    setSummary(null);
    try {
      const projectData = {
        name: `Tasks in "${columnTitle}" column`,
        description: `This is a summary for the tasks currently in the "${columnTitle}" status.`,
        tasks: tasks.map((t) => ({ title: t.title, description: t.description, status: t.status })),
      };
      const result = await aiService.summarizeProject(projectData);
      setSummary(result.summary);
    } catch (err) {
      setError('Failed to generate summary. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, scale: 0.95, y: -10 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.95, y: -10 }}
        className="absolute top-14 right-0 w-72 sm:w-80 bg-white border border-slate-200 rounded-2xl shadow-strong p-4 z-40"
      >
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-cyan-500 flex items-center justify-center shadow-sm">
              <Sparkles className="w-4 h-4 text-white" />
            </div>
            <h3 className="font-bold text-sm text-slate-900">AI Summary</h3>
          </div>
          <motion.button
            whileHover={{ rotate: 90, scale: 1.1 }}
            onClick={onClose}
            className="p-1 hover:bg-slate-100 rounded-lg transition-colors"
          >
            <X className="w-4 h-4 text-slate-500" />
          </motion.button>
        </div>

        {error && <p className="text-sm text-red-600 mb-3 bg-red-50 p-2 rounded-lg">{error}</p>}

        {!summary ? (
          <motion.button
            whileHover={{ scale: 1.01 }}
            whileTap={{ scale: 0.99 }}
            onClick={handleSummarize}
            disabled={isLoading}
            className="w-full px-4 py-2.5 bg-gradient-to-r from-blue-600 to-cyan-600 text-white rounded-xl font-semibold hover:shadow-md transition-all disabled:opacity-50 text-sm"
          >
            {isLoading ? (
              <div className="flex items-center justify-center gap-2">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                  className="w-4 h-4 border-2 border-white border-t-transparent rounded-full"
                />
                Summarizing...
              </div>
            ) : (
              `Summarize "${columnTitle}"`
            )}
          </motion.button>
        ) : (
          <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className="space-y-3">
            <div className="bg-slate-50 p-3 rounded-xl border border-slate-200">
              <p className="text-sm text-slate-700 leading-relaxed whitespace-pre-wrap">{summary}</p>
            </div>
            <motion.button
              whileHover={{ scale: 1.01 }}
              whileTap={{ scale: 0.99 }}
              onClick={handleSummarize}
              disabled={isLoading}
              className="w-full px-4 py-2 border border-slate-300 rounded-xl text-sm font-semibold hover:bg-slate-50 transition-colors text-slate-700"
            >
              {isLoading ? 'Regenerating...' : 'Get Another Summary'}
            </motion.button>
          </motion.div>
        )}
      </motion.div>
    </AnimatePresence>
  );
}



src\components\kanban\KanbanColumn.jsx
/* code of this file */

import { motion } from 'framer-motion';
import {
  Plus,
  MoreVertical,
  Sparkles,
  X,
  Edit2,
  CircleDashed,
  CircleDot,
  CheckCircle2,
} from 'lucide-react';
import { Draggable } from '@hello-pangea/dnd';
import { useState, useRef, useEffect } from 'react';
import ColumnSummarizer from '../ai/ColumnSummarizer';

export default function KanbanColumn({
  column,
  isDraggingOver,
  isDragging,
  onAddTask,
  onEditTask,
  onDeleteTask,
  onRenameColumn,
  droppableProvided,
  droppableSnapshot,
}) {
  const [showSummarizer, setShowSummarizer] = useState(false);
  const [showOptions, setShowOptions] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [newTitle, setNewTitle] = useState(column.title);
  const inputRef = useRef(null);

  const colorMap = {
    'To Do': 'bg-blue-50/80 border-blue-200',
    'In Progress': 'bg-amber-50/80 border-amber-200',
    'Done': 'bg-emerald-50/80 border-emerald-200',
  };

  const badgeColorMap = {
    'To Do': 'bg-blue-100 text-blue-700',
    'In Progress': 'bg-amber-100 text-amber-700',
    'Done': 'bg-emerald-100 text-emerald-700',
  };

  const headerBadgeColorMap = {
    'To Do': 'bg-blue-600',
    'In Progress': 'bg-amber-600',
    'Done': 'bg-emerald-600',
  };

  const statusIconMap = {
    'To Do': CircleDashed,
    'In Progress': CircleDot,
    'Done': CheckCircle2,
  };

  const IconComponent = statusIconMap[column.id];

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [isEditing]);

  const handleRename = () => {
    if (newTitle.trim() && newTitle.trim() !== column.title) {
      onRenameColumn(column.id, newTitle.trim());
    }
    setIsEditing(false);
    setShowOptions(false);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      handleRename();
    } else if (e.key === 'Escape') {
      setNewTitle(column.title);
      setIsEditing(false);
      setShowOptions(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex flex-col max-h-full rounded-2xl border-2 ${
        colorMap[column.id] || 'bg-slate-50/80 border-slate-200'
      } relative shadow-sm w-[280px] sm:w-86`}
    >
      <div className="p-3 sm:p-4 border-b border-slate-200/60">
        <div className="flex items-center justify-between mb-3">
          {isEditing ? (
            <input
              ref={inputRef}
              type="text"
              value={newTitle}
              onChange={(e) => setNewTitle(e.target.value)}
              onBlur={handleRename}
              onKeyDown={handleKeyDown}
              className="font-bold text-base sm:text-lg bg-transparent border-b-2 border-blue-600 focus:outline-none w-full text-slate-900"
            />
          ) : (
            <div
              className={`flex items-center gap-2 px-2 sm:px-3 py-1.5 rounded-lg text-white font-semibold text-xs sm:text-sm ${
                headerBadgeColorMap[column.id] || 'bg-slate-500'
              }`}
            >
              {IconComponent && <IconComponent className="w-3.5 h-3.5 sm:w-4 sm:h-4" strokeWidth={3.2} />}
              <span>{column.title.toUpperCase()}</span>
            </div>
          )}

          <div className="flex items-center gap-1 relative">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowSummarizer(!showSummarizer)}
              className="p-1.5 rounded-lg hover:bg-white/60 transition-colors text-slate-600 hover:text-blue-600"
              title="Summarize with AI"
            >
              <Sparkles className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
            </motion.button>
            <motion.button
              whileHover={{ rotate: 90 }}
              onClick={() => setShowOptions(!showOptions)}
              className="p-1.5 rounded-lg hover:bg-white/60 transition-colors text-slate-600"
            >
              <MoreVertical className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
            </motion.button>
            {showOptions && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="absolute top-full right-0 mt-2 w-32 bg-white border border-slate-200 rounded-xl shadow-medium z-20 overflow-hidden"
              >
                <button
                  onClick={() => {
                    setIsEditing(true);
                    setShowOptions(false);
                  }}
                  className="w-full flex items-center gap-2 px-3 py-2.5 text-sm hover:bg-slate-50 text-slate-700 transition-colors"
                >
                  <Edit2 className="w-3.5 h-3.5" /> Rename
                </button>
              </motion.div>
            )}
          </div>
        </div>

        <span
          className={`inline-flex items-center px-2 sm:px-2.5 py-1 rounded-full text-xs font-semibold ${
            badgeColorMap[column.id] || 'bg-slate-100 text-slate-700'
          }`}
        >
          {column.tasks.length} {column.tasks.length === 1 ? 'task' : 'tasks'}
        </span>
      </div>

      <div
        ref={droppableProvided ? droppableProvided.innerRef : null}
        {...(droppableProvided ? droppableProvided.droppableProps : {})}
        className={`p-2 sm:p-3 space-y-2 sm:space-y-2.5 transition-[height] duration-200 ease-in-out ${
          column.tasks.length > 3 ? 'overflow-y-auto' : 'overflow-visible'
        } ${isDraggingOver && column.tasks.length > 3 ? 'pb-24' : ''} ${
          isDragging && column.tasks.length === 0 ? 'min-h-[4.5rem]' : ''
        }`}
      >
        {column.tasks.map((task, index) => (
          <Draggable key={task._id} draggableId={task._id} index={index}>
            {(provided, snapshot) => (
              <div
                ref={provided.innerRef}
                {...provided.draggableProps}
                {...provided.dragHandleProps}
                onClick={() => onEditTask(task)}
                className={`p-3 sm:p-4 rounded-xl bg-white border border-slate-200 cursor-grab active-cursor-grabbing group hover:shadow-md transition-all ${
                  snapshot.isDragging ? 'shadow-strong ring-2 ring-blue-500 scale-105' : ''
                }`}
              >
                <div className="flex items-start justify-between gap-2">
                  <div className="flex-1 min-w-0">
                    <h4 className="font-semibold text-xs sm:text-sm mb-1.5 text-slate-900 group-hover:text-blue-600 transition-colors">
                      {task.title}
                    </h4>
                    <p className="text-xs text-slate-500 line-clamp-2 leading-relaxed">
                      {task.description}
                    </p>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    onClick={(e) => {
                      e.stopPropagation();
                      onDeleteTask(task._id);
                    }}
                    className="opacity-0 group-hover:opacity-100 p-1 text-slate-400 hover:text-red-600 transition-all rounded-lg hover:bg-red-50 flex-shrink-0"
                  >
                    <X className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                  </motion.button>
                </div>
              </div>
            )}
          </Draggable>
        ))}

        {droppableProvided && droppableProvided.placeholder}
      </div>

      <div className="p-2 sm:p-3 border-t border-slate-200/60">
        <motion.button
          whileHover={{ scale: 1.01 }}
          whileTap={{ scale: 0.99 }}
          onClick={onAddTask}
          className="w-full flex items-center justify-center gap-2 px-3 py-2 sm:py-2.5 rounded-xl border-2 border-dashed border-slate-300 text-slate-600 hover:text-blue-600 hover:border-blue-400 hover:bg-blue-50/50 transition-all"
        >
          <Plus className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
          <span className="text-xs sm:text-sm font-semibold">Add Task</span>
        </motion.button>
      </div>

      {showSummarizer && (
        <ColumnSummarizer
          columnTitle={column.title}
          tasks={column.tasks}
          onClose={() => setShowSummarizer(false)}
        />
      )}
    </motion.div>
  );
}




src\components\layout\Sidebar.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { Plus, Layers, X, PanelLeftClose } from 'lucide-react';
import { Link, useParams } from 'react-router-dom';
import { useApp } from '../../context/AppContext';

const PROJECT_COLORS = [
  'bg-blue-200', 'bg-orange-200', 'bg-green-200', 'bg-indigo-200',
  'bg-pink-200', 'bg-yellow-200', 'bg-red-200', 'bg-teal-200',
  'bg-cyan-200', 'bg-lime-200', 'bg-emerald-200', 'bg-sky-200',
  'bg-violet-200', 'bg-purple-200', 'bg-fuchsia-200', 'bg-rose-200',
  'bg-amber-200', 'bg-gray-200', 'bg-slate-200', 'bg-zinc-200',
  'bg-neutral-200', 'bg-stone-200', 'bg-red-300', 'bg-teal-300',
  'bg-cyan-300', 'bg-lime-300', 'bg-violet-300', 'bg-purple-300',
  'bg-fuchsia-300', 'bg-rose-300', 'bg-amber-300', 'bg-gray-300',
];

export default function Sidebar({ onNewProject, isOpen, onToggle }) {
  const { projects } = useApp();
  const { projectId: selectedProjectId } = useParams();

  return (
    <>
      <AnimatePresence>
        {isOpen && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="fixed inset-0 bg-black/30 backdrop-blur-sm z-30 lg:hidden"
              onClick={onToggle}
            />
            <motion.aside
              initial={{ x: -280 }}
              animate={{ x: 0 }}
              exit={{ x: -280 }}
              transition={{ type: 'spring', damping: 30, stiffness: 300 }}
              className="w-72 bg-white border-r border-slate-200 flex flex-col shadow-lg fixed lg:relative inset-y-0 left-0 z-40"
            >
              <div className="p-6 border-b border-slate-100">
                <div className="flex items-center justify-between">
                  <Link to="/projects">
                    <div className="flex items-center gap-3">
                      <div className="w-9 h-9 rounded-lg bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-md">
                        <Layers className="w-5 h-5 text-white" />
                      </div>
                      <h1 className="text-xl font-bold text-slate-900 tracking-tight">FlowBoard</h1>
                    </div>
                  </Link>
                  <button
                    onClick={onToggle}
                    className="p-2 hover:bg-slate-100 rounded-lg transition-colors"
                    title="Close sidebar"
                  >
                    <X className="w-5 h-5 text-slate-600 lg:hidden" />
                    <PanelLeftClose className="w-5 h-5 text-slate-600 hidden lg:block" />
                  </button>
                </div>
              </div>

              <div className="flex-1 overflow-y-auto p-4">
                <div className="mb-4">
                  <h2 className="text-xs font-bold text-slate-500 uppercase tracking-wider mb-4 px-3">
                    Projects
                  </h2>
                  <div className="space-y-1">
                    {projects.length === 0 ? (
                      <p className="text-sm italic text-slate-400 px-3 py-2">No projects yet</p>
                    ) : (
                      projects.map((project, index) => {
                        const dotColor = PROJECT_COLORS[index % PROJECT_COLORS.length];

                        return (
                          <Link to={`/projects/${project._id}`} key={project._id}>
                            <motion.div
                              whileHover={{ x: 2 }}
                              className={`w-full text-left px-3 py-2.5 rounded-lg transition-all ${
                                selectedProjectId === project._id
                                  ? 'bg-blue-50 text-blue-700 shadow-sm'
                                  : 'text-slate-700 hover:bg-slate-50'
                              }`}
                            >
                              <div className="flex items-center gap-3">
                                <div className={`w-2.5 h-2.5 rounded-full ${dotColor}`}></div>
                                <span className="text-sm truncate font-medium">{project.name}</span>
                              </div>
                            </motion.div>
                          </Link>
                        );
                      })
                    )}
                  </div>
                </div>
                <motion.button
                  whileHover={{ scale: 1.01 }}
                  whileTap={{ scale: 0.99 }}
                  onClick={onNewProject}
                  className="w-full flex items-center justify-center gap-2 px-3 py-2.5 rounded-lg border-2 border-dashed border-slate-300 text-slate-600 hover:text-blue-600 hover:border-blue-300 hover:bg-blue-50/50 transition-all"
                >
                  <Plus className="w-4 h-4" />
                  <span className="text-sm font-medium">New Project</span>
                </motion.button>
              </div>
              <div className="p-4 border-t border-slate-100">
                <div className="text-xs text-slate-400">v1.0.0</div>
              </div>
            </motion.aside>
          </>
        )}
      </AnimatePresence>
    </>
  );
}



src\components\modals\ProjectModal.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { useState, useEffect } from 'react';

export default function ProjectModal({ project, onClose, onSave }) {
  const [formData, setFormData] = useState({ name: '', description: '' });

  useEffect(() => {
    if (project) {
      setFormData({ name: project.name, description: project.description });
    }
  }, [project]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({ ...formData, created: new Date().toISOString() });
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
        className="fixed inset-0 bg-slate-900/40 backdrop-blur-sm flex items-center justify-center z-[100] px-4"
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0, y: 20 }}
          animate={{ scale: 1, opacity: 1, y: 0 }}
          exit={{ scale: 0.95, opacity: 0, y: 20 }}
          onClick={(e) => e.stopPropagation()}
          className="bg-white rounded-2xl shadow-strong w-full max-w-md p-6 border border-slate-200"
        >
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-slate-900">{project ? 'Edit Project' : 'New Project'}</h2>
            <motion.button
              whileHover={{ rotate: 90, scale: 1.1 }}
              onClick={onClose}
              className="p-1.5 hover:bg-slate-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5 text-slate-500" />
            </motion.button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Project Name</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="Enter project name"
                className="w-full px-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-slate-900"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Enter project description"
                rows={3}
                className="w-full px-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none transition-all text-slate-900"
              />
            </div>

            <div className="flex gap-3 pt-4">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-2.5 border border-slate-300 rounded-xl hover:bg-slate-50 transition-all font-medium text-slate-700"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="submit"
                className="flex-1 px-4 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:shadow-lg transition-all"
              >
                {project ? 'Update' : 'Create'}
              </motion.button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}



src\components\modals\TaskModal.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { useState, useEffect } from 'react';

export default function TaskModal({ task, onClose, onSave }) {
  const [formData, setFormData] = useState({ title: '', description: '' });

  useEffect(() => {
    if (task) {
      setFormData({ title: task.title, description: task.description });
    }
  }, [task]);

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
        className="fixed inset-0 bg-slate-900/40 backdrop-blur-sm flex items-center justify-center z-[100] px-4"
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0, y: 20 }}
          animate={{ scale: 1, opacity: 1, y: 0 }}
          exit={{ scale: 0.95, opacity: 0, y: 20 }}
          onClick={(e) => e.stopPropagation()}
          className="bg-white rounded-2xl shadow-strong w-full max-w-md p-6 border border-slate-200"
        >
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-slate-900">{task ? 'Edit Task' : 'New Task'}</h2>
            <motion.button
              whileHover={{ rotate: 90, scale: 1.1 }}
              onClick={onClose}
              className="p-1.5 hover:bg-slate-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5 text-slate-500" />
            </motion.button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Task Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="Enter task title"
                className="w-full px-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-slate-900"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-semibold text-slate-700 mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Enter task description"
                rows={3}
                className="w-full px-4 py-2.5 bg-slate-50 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none transition-all text-slate-900"
              />
            </div>

            <div className="flex gap-3 pt-4">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-2.5 border border-slate-300 rounded-xl hover:bg-slate-50 transition-all font-medium text-slate-700"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="submit"
                className="flex-1 px-4 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:shadow-lg transition-all"
              >
                {task ? 'Update' : 'Create'}
              </motion.button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}



src\components\ui\ProjectsPageSkeleton.jsx
/* code of this file */

import { motion } from 'framer-motion';
import { Menu, Plus } from 'lucide-react';

export default function ProjectsPageSkeleton({ onToggleSidebar, isSidebarOpen }) {
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.05 } },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  const shimmer = {
    backgroundImage: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent)',
    backgroundSize: '200% 100%',
    animation: 'shimmer 1.5s infinite',
  };

  return (
    <div className="h-full overflow-y-auto bg-slate-50">
      <style>{`
        @keyframes shimmer {
          0% { background-position: -200% 0; }
          100% { background-position: 200% 0; }
        }
      `}</style>

      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="sticky top-0 bg-white/95 backdrop-blur-sm border-b border-slate-200 p-4 sm:p-6 z-10 shadow-sm"
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            {!isSidebarOpen && (
              <button
                onClick={onToggleSidebar}
                className="p-2 hover:bg-slate-100 rounded-lg transition-colors"
              >
                <Menu className="w-5 h-5 text-slate-600" />
              </button>
            )}
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold text-slate-900">Projects</h1>
              <p className="text-slate-500 mt-1 text-sm sm:text-base">Select a project or create a new one</p>
            </div>
          </div>
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            disabled
            className="flex items-center gap-2 px-3 sm:px-4 py-2 sm:py-2.5 bg-blue-600 text-white rounded-xl font-semibold opacity-50 cursor-not-allowed text-sm"
          >
            <Plus className="w-4 h-4" />
            <span className="hidden sm:inline">New Project</span>
          </motion.button>
        </div>
      </motion.div>

      <div className="p-4 sm:p-6">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          animate="visible"
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6"
        >
          {[1, 2, 3, 4, 5, 6].map((i) => (
            <motion.div
              key={i}
              variants={itemVariants}
              className="bg-white border border-slate-200 rounded-2xl p-4 sm:p-6 shadow-soft relative overflow-hidden"
            >
              <div className="animate-pulse">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1 min-w-0 pr-8">
                    <div className="h-5 sm:h-6 bg-slate-200 rounded w-3/4 mb-2 relative overflow-hidden" style={shimmer}></div>
                    <div className="h-4 bg-slate-200 rounded w-full mb-1 relative overflow-hidden" style={shimmer}></div>
                    <div className="h-4 bg-slate-200 rounded w-2/3 relative overflow-hidden" style={shimmer}></div>
                  </div>
                  <div className="w-4 h-4 bg-slate-200 rounded"></div>
                </div>
                <div className="flex items-center justify-between pt-4 border-t border-slate-100">
                  <div className="flex items-center gap-3 sm:gap-4">
                    <div className="h-3 bg-slate-200 rounded w-20 relative overflow-hidden" style={shimmer}></div>
                    <div className="h-3 bg-slate-200 rounded w-16 relative overflow-hidden" style={shimmer}></div>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </motion.div>
      </div>
    </div>
  );
}



src\components\ui\Toast.jsx
/* code of this file */

// src/components/ui/Toast.jsx
import { motion, AnimatePresence } from 'framer-motion';
import { CheckCircle2, XCircle, X } from 'lucide-react';
import { useState, useEffect } from 'react';

export default function Toast({ message, type = 'success', onClose = () => {} }) {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    // Step 1: after timeout, start exit animation
    const hideTimer = setTimeout(() => {
      setIsVisible(false);
    }, 2700);

    return () => clearTimeout(hideTimer);
  }, []);

  // Step 2: when the exit animation completes, call onClose to clear toast from context
  const handleAnimationComplete = (definition) => {
    // Framer Motion calls this when animation finishes - we want to detect exit completion
    // We'll not rely on this here; instead use onAnimationComplete on exit is tricky.
  };

  const icons = {
    success: <CheckCircle2 className="w-5 h-5" />,
    error: <XCircle className="w-5 h-5" />,
  };

  const styles = {
    success: 'bg-emerald-50 text-emerald-800 border-emerald-200',
    error: 'bg-red-50 text-red-800 border-red-200',
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: -50, x: '-50%' }}
          animate={{ opacity: 1, y: 0, x: '-50%' }}
          exit={{ opacity: 0, y: -50, x: '-50%' }}
          transition={{ duration: 0.28 }}
          onAnimationComplete={(definition) => {
            // If animation finished and we are not visible, call onClose.
            // Note: This callback fires for both enter and exit. So only call onClose
            // if we are not visible anymore (i.e., the component has been told to exit)
            if (!isVisible) {
              // small timeout to ensure DOM updated before we clear context
              setTimeout(() => onClose(), 40);
            }
          }}
          className={`fixed top-6 left-1/2 z-[200] flex items-center gap-3 px-5 py-3.5 rounded-xl border-2 shadow-lg ${styles[type]}`}
          style={{ maxWidth: '90vw', transform: 'translateX(-50%)' }}
        >
          <div className="flex-shrink-0">{icons[type]}</div>
          <p className="font-semibold text-sm">{message}</p>
          <button
            onClick={() => {
              setIsVisible(false);
              // schedule onClose slightly later (exit animation)
              setTimeout(() => onClose(), 300);
            }}
            className="flex-shrink-0 ml-2 hover:opacity-70 transition-opacity"
          >
            <X className="w-4 h-4" />
          </button>
        </motion.div>
      )}
    </AnimatePresence>
  );
}



src\context\AppContext.jsx
/* code of this file */

import { createContext, useContext, useState } from 'react';

const AppContext = createContext();

export const useApp = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within AppProvider');
  }
  return context;
};

export const AppProvider = ({ children }) => {
  const [projects, setProjects] = useState([]);
  const [toast, setToast] = useState(null);

  const showToast = (message, type = 'success') => {
    setToast({ message, type });
  };

  const value = {
    projects,
    setProjects,
    toast,
    showToast,
    setToast,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};



src\pages\KanbanPage.jsx
/* code of this file */

import { motion } from 'framer-motion';
import { Plus, ChevronLeft, Sparkles, Menu } from 'lucide-react';
import { useState, useEffect, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { DragDropContext, Droppable } from '@hello-pangea/dnd';
import KanbanColumn from '../components/kanban/KanbanColumn';
import TaskModal from '../components/modals/TaskModal';
import AIPanel from '../components/ai/AIPanel';
import { projectService } from '../api/projectService';
import { taskService } from '../api/taskService';
import { useApp } from '../context/AppContext';
import { Navigate } from "react-router-dom";

const COLUMN_CONFIG = {
  'To Do': { title: 'To Do' },
  'In Progress': { title: 'In Progress' },
  'Done': { title: 'Done' },
};

export default function KanbanPage({ onToggleSidebar, isSidebarOpen }) {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [project, setProject] = useState(null);
  const [columns, setColumns] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [selectedColumnId, setSelectedColumnId] = useState('');
  const [showAIPanel, setShowAIPanel] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const { showToast } = useApp();
  const hasLoadedRef = useRef(false);

  const fetchProjectData = useCallback(async () => {
    try {
      if (!projectId) return;

      if (hasLoadedRef.current) {
        setIsLoading(false);
      } else {
        setIsLoading(true);
      }

      const fetchedProject = await projectService.getById(projectId, true);
      setProject(fetchedProject);
      const tasks = fetchedProject.tasks || [];

      const initialColumns = {};
      Object.keys(COLUMN_CONFIG).forEach((key) => {
        initialColumns[key] = {
          id: key,
          title: fetchedProject.columnNames?.[key] || COLUMN_CONFIG[key].title,
          tasks: [],
        };
      });

      tasks.forEach((task) => {
        if (initialColumns[task.status]) {
          initialColumns[task.status].tasks.push(task);
        }
      });

      Object.values(initialColumns).forEach((col) => {
        col.tasks.sort((a, b) => a.order - b.order);
      });

      setColumns(initialColumns);
      hasLoadedRef.current = true;
    } catch (error) {
      showToast(`Failed to load project: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  }, [projectId, showToast]);

  useEffect(() => {
    fetchProjectData();
  }, [fetchProjectData]);

  const handleRenameColumn = async (columnId, newTitle) => {
    const oldTitle = columns[columnId].title;
    const updatedColumns = {
      ...columns,
      [columnId]: { ...columns[columnId], title: newTitle },
    };
    setColumns(updatedColumns);

    try {
      const currentColumnNames = project.columnNames || {
        'To Do': 'To Do',
        'In Progress': 'In Progress',
        'Done': 'Done',
      };
      const newColumnNames = { ...currentColumnNames, [columnId]: newTitle };
      await projectService.update(projectId, { columnNames: newColumnNames });
      showToast('Column renamed!');
    } catch (error) {
      showToast(`Failed to rename column: ${error.message}`, 'error');
      const revertedColumns = {
        ...columns,
        [columnId]: { ...columns[columnId], title: oldTitle },
      };
      setColumns(revertedColumns);
    }
  };

  const handleDragEnd = async (result) => {
    const { source, destination, draggableId } = result;
    if (!destination) return;
    if (source.droppableId === destination.droppableId && source.index === destination.index) {
      return;
    }

    const startCol = columns[source.droppableId];
    const endCol = columns[destination.droppableId];
    const originalColumns = JSON.parse(JSON.stringify(columns));

    const startTasks = Array.from(startCol.tasks);
    const [movedTask] = startTasks.splice(source.index, 1);

    if (startCol === endCol) {
      startTasks.splice(destination.index, 0, movedTask);
      const reorderedTasks = startTasks.map((task, index) => ({ ...task, order: index }));
      const newColumns = {
        ...columns,
        [startCol.id]: { ...startCol, tasks: reorderedTasks },
      };
      setColumns(newColumns);
    } else {
      const endTasks = Array.from(endCol.tasks);
      endTasks.splice(destination.index, 0, { ...movedTask, status: endCol.id });
      const newStartTasks = startTasks.map((task, index) => ({ ...task, order: index }));
      const newEndTasks = endTasks.map((task, index) => ({ ...task, order: index }));
      const newColumns = {
        ...columns,
        [startCol.id]: { ...startCol, tasks: newStartTasks },
        [endCol.id]: { ...endCol, tasks: newEndTasks },
      };
      setColumns(newColumns);
    }

    try {
      await taskService.update(draggableId, {
        status: destination.droppableId,
        order: destination.index,
      });
    } catch (error) {
      showToast(`Failed to move task: ${error.message}`, 'error');
      setColumns(originalColumns);
    }
  };

  const handleSaveTask = async (data) => {
    try {
      if (selectedTask) {
        await taskService.update(selectedTask._id, data);
        showToast('Task updated!');
      } else {
        await projectService.createTask(projectId, { ...data, status: selectedColumnId });
        showToast('Task created!');
      }
      await fetchProjectData();
    } catch (error) {
      showToast(`Failed to save task: ${error.message}`, 'error');
    } finally {
      setShowTaskModal(false);
      setSelectedTask(null);
    }
  };

  const handleDeleteTask = async (taskId) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      try {
        await taskService.delete(taskId);
        showToast('Task deleted!');
        await fetchProjectData();
      } catch (error) {
        showToast(`Failed to delete task: ${error.message}`, 'error');
      }
    }
  };

  const handleOpenCreateModal = (columnId) => {
    setSelectedColumnId(columnId);
    setSelectedTask(null);
    setShowTaskModal(true);
  };

  const handleOpenEditModal = (task) => {
    setSelectedTask(task);
    setShowTaskModal(true);
  };

  if (isLoading) {
    return (
      <div className="h-full flex flex-col bg-slate-50">
        <div className="flex items-center justify-between p-4 sm:p-6 border-b border-slate-200 bg-white shadow-sm">
          <div className="flex items-center gap-2 sm:gap-4 min-w-0 flex-1">
            {!isSidebarOpen && (
              <button
                onClick={onToggleSidebar}
                className="p-2 hover:bg-slate-100 rounded-lg transition-colors flex-shrink-0"
              >
                <Menu className="w-5 h-5 text-slate-600" />
              </button>
            )}
            <div className="min-w-0 flex-1 animate-pulse">
              <div className="h-6 sm:h-8 bg-slate-200 rounded w-48 mb-1"></div>
              <div className="h-3 sm:h-4 bg-slate-200 rounded w-32 hidden sm:block"></div>
            </div>
          </div>
        </div>
        <div className="flex-1 overflow-x-auto overflow-y-hidden p-3 sm:p-6">
          <div className="flex items-start gap-3 sm:gap-6 h-full">
            {[1, 2, 3].map((i) => (
              <div
                key={i}
                className="w-[280px] sm:w-86 bg-white/50 border-2 border-slate-200 rounded-2xl shadow-sm animate-pulse"
              >
                <div className="p-3 sm:p-4 border-b border-slate-200">
                  <div className="h-8 bg-slate-200 rounded-lg w-32 mb-3"></div>
                  <div className="h-6 bg-slate-200 rounded-full w-20"></div>
                </div>
                <div className="p-2 sm:p-3 space-y-2">
                  {[1, 2].map((j) => (
                    <div key={j} className="p-3 sm:p-4 bg-white rounded-xl border border-slate-200">
                      <div className="h-4 bg-slate-200 rounded w-3/4 mb-2"></div>
                      <div className="h-3 bg-slate-200 rounded w-full mb-1"></div>
                      <div className="h-3 bg-slate-200 rounded w-2/3"></div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (!project) {
    // return (
    //   <div className="flex items-center justify-center h-full text-red-600">
    //     Could not load project. Please go back and try again.
    //   </div>
    // );
    return <Navigate to="/" replace />;
  }

  return (
    <div className="h-full flex flex-col bg-slate-50">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center justify-between p-4 sm:p-6 border-b border-slate-200 bg-white shadow-sm"
      >
        <div className="flex items-center gap-2 sm:gap-4 min-w-0 flex-1">
          {!isSidebarOpen && (
            <button
              onClick={onToggleSidebar}
              className="p-2 hover:bg-slate-100 rounded-lg transition-colors flex-shrink-0"
            >
              <Menu className="w-5 h-5 text-slate-600" />
            </button>
          )}
          <motion.button
            whileHover={{ x: -4 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => navigate('/projects')}
            className="p-2 hover:bg-slate-100 rounded-lg transition-colors hidden sm:block flex-shrink-0"
          >
            <ChevronLeft className="w-5 h-5 text-slate-600" />
          </motion.button>
          <div className="min-w-0 flex-1">
            <h1 className="text-xl sm:text-2xl font-bold text-slate-900 truncate">{project.name}</h1>
            <p className="text-xs sm:text-sm text-slate-500 hidden sm:block">
              Manage tasks and track progress
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2 sm:gap-3 flex-shrink-0">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => setShowAIPanel(!showAIPanel)}
            className="hidden sm:flex items-center gap-2 px-3 sm:px-4 py-2 sm:py-2.5 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-xl font-semibold hover:shadow-md transition-all text-sm"
          >
            <Sparkles className="w-4 h-4" />
            <span className="hidden md:inline">AI Assistant</span>
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => setShowAIPanel(!showAIPanel)}
            className="sm:hidden p-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg hover:shadow-md transition-all"
          >
            <Sparkles className="w-4 h-4" />
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => handleOpenCreateModal(Object.keys(COLUMN_CONFIG)[0])}
            className="flex items-center gap-2 px-3 sm:px-4 py-2 sm:py-2.5 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 hover:shadow-md transition-all text-sm"
          >
            <Plus className="w-4 h-4" />
            <span className="hidden sm:inline">New Column</span>
          </motion.button>
        </div>
      </motion.div>

      <div className="flex-1 overflow-x-auto overflow-y-hidden p-3 sm:p-6">
        <DragDropContext
          onDragStart={() => setIsDragging(true)}
          onDragEnd={(result) => {
            setIsDragging(false);
            handleDragEnd(result);
          }}
        >
          <div className="flex items-start gap-3 sm:gap-6 min-w-min h-full pb-4">
            {columns &&
              Object.values(columns).map((column) => (
                <Droppable key={column.id} droppableId={column.id}>
                  {(provided, snapshot) => (
                    <KanbanColumn
                      column={column}
                      isDraggingOver={snapshot.isDraggingOver}
                      isDragging={isDragging}
                      onAddTask={() => handleOpenCreateModal(column.id)}
                      onEditTask={(task) => handleOpenEditModal(task)}
                      onDeleteTask={handleDeleteTask}
                      onRenameColumn={handleRenameColumn}
                      droppableProvided={provided}
                      droppableSnapshot={snapshot}
                    />
                  )}
                </Droppable>
              ))}
          </div>
        </DragDropContext>
      </div>

      {showTaskModal && (
        <TaskModal task={selectedTask} onClose={() => setShowTaskModal(false)} onSave={handleSaveTask} />
      )}

      {showAIPanel && <AIPanel projectContext={project} onClose={() => setShowAIPanel(false)} />}
    </div>
  );
}




src\pages\ProjectsPage.jsx
/* code of this file */

import { motion } from 'framer-motion';
import { MoreVertical, Calendar, FileText, Trash2, Edit2, Menu, Plus } from 'lucide-react';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { projectService } from '../api/projectService';
import { useApp } from '../context/AppContext';

export default function ProjectsPage({
  onEditProject,
  onNewProject,
  onToggleSidebar,
  isSidebarOpen,
  isLoading = false,
}) {
  const { projects, setProjects, showToast } = useApp();
  const [showMenu, setShowMenu] = useState(null);
  const navigate = useNavigate();

  const handleDeleteProject = async (id) => {
    setShowMenu(null);
    if (window.confirm('Are you sure you want to delete this project and all its tasks?')) {
      try {
        await projectService.delete(id);
        setProjects(projects.filter((p) => p._id !== id));
        showToast('Project deleted successfully!');
      } catch (error) {
        showToast(`Error: ${error.message}`, 'error');
      }
    }
  };

  const handleOpenEditModal = (project) => {
    onEditProject(project);
    setShowMenu(null);
  };

  const containerVariants = {
    visible: {
      transition: {
        staggerChildren: 0.05,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.3,
      }
    },
  };

  const showSkeletons = isLoading && projects.length === 0;
  const showProjects = projects.length > 0;

  return (
    <div className="h-full overflow-y-auto bg-slate-50">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="sticky top-0 bg-white/95 backdrop-blur-sm border-b border-slate-200 p-4 sm:p-6 z-10 shadow-sm"
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            {!isSidebarOpen && (
              <button
                onClick={onToggleSidebar}
                className="p-2 hover:bg-slate-100 rounded-lg transition-colors"
              >
                <Menu className="w-5 h-5 text-slate-600" />
              </button>
            )}
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold text-slate-900">Projects</h1>
              <p className="text-slate-500 mt-1 text-sm sm:text-base">
                Select a project or create a new one
              </p>
            </div>
          </div>

          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={onNewProject}
            className="flex items-center gap-2 px-3 sm:px-4 py-2 sm:py-2.5 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 hover:shadow-md transition-all text-sm"
          >
            <Plus className="w-4 h-4" />
            <span className="hidden sm:inline">New Project</span>
          </motion.button>
        </div>
      </motion.div>

      <div className="p-4 sm:p-6">
        <div className="relative">
          {showSkeletons && (
            <motion.div
              initial={{ opacity: 1 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6"
            >
              {[1, 2, 3, 4, 5, 6].map((i) => (
                <div
                  key={`skeleton-${i}`}
                  className="bg-white border border-slate-200 rounded-2xl p-4 sm:p-6 shadow-soft relative overflow-hidden"
                >
                  <div className="animate-pulse">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1 min-w-0 pr-8">
                        <div className="h-5 sm:h-6 bg-slate-200 rounded w-3/4 mb-2"></div>
                        <div className="h-4 bg-slate-200 rounded w-full mb-1"></div>
                        <div className="h-4 bg-slate-200 rounded w-2/3"></div>
                      </div>
                      <div className="w-4 h-4 bg-slate-200 rounded"></div>
                    </div>
                    <div className="flex items-center justify-between pt-4 border-t border-slate-100">
                      <div className="flex items-center gap-3 sm:gap-4">
                        <div className="h-3 bg-slate-200 rounded w-20"></div>
                        <div className="h-3 bg-slate-200 rounded w-16"></div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </motion.div>
          )}

          {showProjects && (
            <motion.div
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6"
            >
              {projects.map((project) => (
                <motion.div
                  key={project._id}
                  variants={itemVariants}
                  layout
                  whileHover={{
                    y: -4,
                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.12)',
                  }}
                  onClick={() => navigate(`/projects/${project._id}`)}
                  className="group bg-white border border-slate-200 rounded-2xl p-4 sm:p-6 cursor-pointer hover:border-blue-300 transition-all relative shadow-soft"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1 min-w-0 pr-8">
                      <h3 className="text-base sm:text-lg font-bold group-hover:text-blue-600 transition-colors truncate text-slate-900">
                        {project.name}
                      </h3>
                      <p className="text-xs sm:text-sm text-slate-500 mt-1.5 line-clamp-2 leading-relaxed">
                        {project.description || 'No description provided.'}
                      </p>
                    </div>
                    <div className="relative">
                      <motion.button
                        whileHover={{ rotate: 90 }}
                        onClick={(e) => {
                          e.stopPropagation();
                          setShowMenu(showMenu === project._id ? null : project._id);
                        }}
                        className="p-2 rounded-lg hover:bg-slate-100 text-slate-500 hover:text-slate-700 transition-colors"
                      >
                        <MoreVertical className="w-4 h-4" />
                      </motion.button>

                      {showMenu === project._id && (
                        <motion.div
                          initial={{ opacity: 0, y: -10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -10 }}
                          className="absolute top-full right-0 mt-2 w-48 bg-white border border-slate-200 rounded-xl shadow-medium z-50 overflow-hidden"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <motion.button
                            whileHover={{ x: 4 }}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleOpenEditModal(project);
                            }}
                            className="w-full flex items-center gap-2 px-4 py-2.5 text-sm hover:bg-slate-50 transition-colors text-left text-slate-700"
                          >
                            <Edit2 className="w-4 h-4" /> Edit
                          </motion.button>
                          <motion.button
                            whileHover={{ x: 4 }}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteProject(project._id);
                            }}
                            className="w-full flex items-center gap-2 px-4 py-2.5 text-sm hover:bg-red-50 text-red-600 transition-colors text-left"
                          >
                            <Trash2 className="w-4 h-4" /> Delete
                          </motion.button>
                        </motion.div>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center justify-between pt-4 border-t border-slate-100">
                    <div className="flex items-center gap-3 sm:gap-4 text-xs text-slate-500">
                      <div className="flex items-center gap-1.5">
                        <Calendar className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                        <span className="hidden sm:inline">
                          {new Date(project.createdAt).toLocaleDateString()}
                        </span>
                        <span className="sm:hidden">
                          {new Date(project.createdAt).toLocaleDateString('en-US', {
                            month: 'short',
                            day: 'numeric',
                          })}
                        </span>
                      </div>
                      <div className="flex items-center gap-1.5">
                        <FileText className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                        {`${project.taskCount ?? 0} tasks`}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
}



src\App.css
/* code of this file */




src\App.jsx
/* code of this file */

import { useState, useEffect } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import Sidebar from './components/layout/Sidebar';
import ProjectsPage from './pages/ProjectsPage';
import KanbanPage from './pages/KanbanPage';
import { AppProvider, useApp } from './context/AppContext';
import ProjectModal from './components/modals/ProjectModal';
import { projectService } from './api/projectService';
import Toast from './components/ui/Toast';
import ProjectsPageSkeleton from './components/ui/ProjectsPageSkeleton';

function AppContent() {
  const { projects, setProjects, showToast, toast, setToast } = useApp();
  const [isProjectModalOpen, setIsProjectModalOpen] = useState(false);
  const [editingProject, setEditingProject] = useState(null);
  const [isSidebarOpen, setIsSidebarOpen] = useState(() => {
    return typeof window !== 'undefined' && window.innerWidth >= 1024;
  });
  const [isLoadingProjects, setIsLoadingProjects] = useState(true);

  useEffect(() => {
    const handleResize = () => {
      const isLargeScreen = window.innerWidth >= 1024;
      setIsSidebarOpen(isLargeScreen);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        setIsLoadingProjects(true);
        const fetchedProjects = await projectService.getAll(true);
        setProjects(fetchedProjects);
      } catch (error) {
        showToast(`Failed to load projects: ${error.message}`, 'error');
      } finally {
        setIsLoadingProjects(false);
      }
    };
    fetchProjects();
  }, [setProjects, showToast]);

  const handleOpenProjectModal = (project = null) => {
    setEditingProject(project);
    setIsProjectModalOpen(true);
  };

  const handleCloseProjectModal = () => {
    setIsProjectModalOpen(false);
    setEditingProject(null);
  };

  const handleSaveProject = async (formData) => {
    try {
      if (editingProject) {
        const updatedProject = await projectService.update(editingProject._id, formData);
        setProjects(projects.map((p) => (p._id === editingProject._id ? updatedProject : p)));
        showToast('Project updated successfully!');
      } else {
        const newProject = await projectService.create(formData);
        setProjects([newProject, ...projects]);
        showToast('Project created successfully!');
      }
    } catch (error) {
      showToast(`Error: ${error.message}`, 'error');
    } finally {
      handleCloseProjectModal();
    }
  };

  const handleToastClose = () => {
    // clear toast from context (Toast component calls this after exit)
    setToast(null);
  };

  return (
    <>
      <div className="flex h-screen bg-gray-100 text-foreground overflow-hidden">
        <Sidebar
          onNewProject={() => handleOpenProjectModal()}
          isOpen={isSidebarOpen}
          onToggle={() => setIsSidebarOpen(!isSidebarOpen)}
        />
        <main className="flex-1 overflow-hidden">
          <Routes>
            <Route path="/" element={<Navigate to="/projects" replace />} />
            {/* Always render ProjectsPage. Let it internally show skeletons when loading */}
            <Route
              path="/projects"
              element={
                <ProjectsPage
                  onEditProject={handleOpenProjectModal}
                  onNewProject={() => handleOpenProjectModal()}
                  onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}
                  isSidebarOpen={isSidebarOpen}
                  isLoading={isLoadingProjects} // <-- new prop
                />
              }
            />
            <Route
              path="/projects/:projectId"
              element={
                <KanbanPage
                  onToggleSidebar={() => setIsSidebarOpen(!isSidebarOpen)}
                  isSidebarOpen={isSidebarOpen}
                />
              }
            />
          </Routes>
        </main>
      </div>

      {isProjectModalOpen && (
        <ProjectModal
          project={editingProject}
          onClose={handleCloseProjectModal}
          onSave={handleSaveProject}
        />
      )}

      {/* Only render Toast when context.toast exists. Pass onClose so App clears after exit */}
      {toast && (
        <Toast
          key={toast.message + (toast.type || '')}
          message={toast.message}
          type={toast.type}
          onClose={handleToastClose}
        />
      )}
    </>
  );
}

function App() {
  return (
    <AppProvider>
      <AppContent />
    </AppProvider>
  );
}

export default App;



src\index.css
/* code of this file */

@import "tailwindcss";


/* body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  margin: 0;
  padding: 0;
}

* {
  box-sizing: border-box;
}

#root {
  width: 100%;
  height: 100vh;
  overflow: hidden;
}

.active-cursor-grabbing {
  cursor: grabbing !important;
}

@keyframes shimmer {
  0% {
    background-position: -468px 0;
  }
  100% {
    background-position: 468px 0;
  }
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: .6;
  }
}

@media (max-width: 768px) {
  .kanban-columns-container {
    padding: 1rem;
  }
}
 */


/* 
:root {
  --color-background: 255 255 255;
  --color-foreground: 10 10 10;
  --color-card: 255 255 255;
  --color-muted: 244 244 245;
  --color-muted-foreground: 113 113 122;
  --color-border: 228 228 231;
  --color-primary: 59 130 246;
  --color-primary-foreground: 255 255 255;
  --color-destructive: 239 68 68;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: 10 10 10;
    --color-foreground: 250 250 250;
    --color-card: 24 24 27;
    --color-muted: 39 39 42;
    --color-muted-foreground: 161 161 170;
    --color-border: 39 39 42;
    --color-primary: 59 130 246;
    --color-primary-foreground: 255 255 255;
    --color-destructive: 239 68 68;
  }
}

* {
  border-color: rgb(var(--color-border));
}

body {
  background-color: rgb(var(--color-background));
  color: rgb(var(--color-foreground));
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.bg-background { background-color: rgb(var(--color-background)); }
.bg-foreground { background-color: rgb(var(--color-foreground)); }
.bg-card { background-color: rgb(var(--color-card)); }
.bg-muted { background-color: rgb(var(--color-muted)); }
.bg-primary { background-color: rgb(var(--color-primary)); }

.text-background { color: rgb(var(--color-background)); }
.text-foreground { color: rgb(var(--color-foreground)); }
.text-card { color: rgb(var(--color-card)); }
.text-muted-foreground { color: rgb(var(--color-muted-foreground)); }
.text-primary { color: rgb(var(--color-primary)); }
.text-primary-foreground { color: rgb(var(--color-primary-foreground)); }
.text-destructive { color: rgb(var(--color-destructive)); }

.border-border { border-color: rgb(var(--color-border)); }
.border-primary { border-color: rgb(var(--color-primary)); }

.hover\:bg-muted:hover { background-color: rgb(var(--color-muted)); }
.hover\:bg-primary\/90:hover { background-color: rgb(var(--color-primary) / 0.9); }
.hover\:text-foreground:hover { color: rgb(var(--color-foreground)); }
.hover\:text-primary:hover { color: rgb(var(--color-primary)); }
.hover\:text-destructive:hover { color: rgb(var(--color-destructive)); }
.hover\:border-primary\/50:hover { border-color: rgb(var(--color-primary) / 0.5); }
.hover\:border-foreground\/50:hover { border-color: rgb(var(--color-foreground) / 0.5); }

.ring-primary { --tw-ring-color: rgb(var(--color-primary)); }
.focus\:ring-primary:focus { --tw-ring-color: rgb(var(--color-primary)); } */




src\main.jsx
/* code of this file */

// src/main.jsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
)



eslint.config.js
/* code of this file */

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])




index.html
/* code of this file */

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>client</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>




package.json
/* code of this file */

{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hello-pangea/dnd": "^18.0.1",
    "@tailwindcss/vite": "^4.1.14",
    "axios": "^1.12.2",
    "framer-motion": "^12.23.24",
    "lucide-react": "^0.546.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.4",
    "tailwindcss": "^4.1.14"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}




vite.config.js
/* code of this file */

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  // optimizeDeps: {
  //   exclude: ['lucide-react'],
  // },
})




