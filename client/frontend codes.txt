src\api\aiService.js
/* code of this file */

// src/api/aiService.js
import apiClient from './apiClient';

export const aiService = {
  summarizeProject: (projectData) => apiClient.post('/ai/summarize', { projectData }),

  ask: (question, context) => apiClient.post('/ai/ask', { question, context }),
};



src\api\apiClient.js
/* code of this file */

// src/api/apiClient.js
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

/**
 * Interceptor to handle API responses.
 * This is a good place to handle global errors or response transformations.
 */
apiClient.interceptors.response.use(
  (response) => response.data,
  (error) => {
    const message = error.response?.data?.message || error.message;
    console.error(`API Error: ${message}`);
    return Promise.reject(new Error(message));
  }
);

export default apiClient;



src\api\projectService.js
/* code of this file */

// src/api/projectService.js
import apiClient from './apiClient';

export const projectService = {
  // This is the key optimization.
  // We're assuming the backend can handle this query parameter to return a much smaller payload.
  getAll: (populateTaskCount = false) =>
    apiClient.get(`/projects?populateTaskCount=${populateTaskCount}`),

  getById: (id, populateTasks = false) =>
    apiClient.get(`/projects/${id}?populateTasks=${populateTasks}`),

  create: (data) => apiClient.post('/projects', data),

  update: (id, data) => apiClient.put(`/projects/${id}`, data),

  delete: (id) => apiClient.delete(`/projects/${id}`),

  createTask: (projectId, data) => apiClient.post(`/projects/${projectId}/tasks`, data),
};



src\api\taskService.js
/* code of this file */

// src/api/taskService.js
import apiClient from './apiClient';

export const taskService = {
  update: (id, data) => apiClient.put(`/tasks/${id}`, data),

  delete: (id) => apiClient.delete(`/tasks/${id}`),
};



src\components\ai\AIPanel.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { X, Send, Sparkles } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';
import { aiService } from '../../api/aiService';

export default function AIPanel({ projectContext, onClose }) {
  const [messages, setMessages] = useState([
    {
      id: 'init',
      type: 'ai',
      content: "Hello! Ask me anything about this project, like 'what are the next steps?' or 'summarize the tasks in progress'.",
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isLoading]);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = { id: Date.now().toString(), type: 'user', content: input };
    setMessages((prev) => [...prev, userMessage]);
    const currentInput = input;
    setInput('');
    setIsLoading(true);

    try {
      const context = JSON.stringify({
          name: projectContext.name,
          description: projectContext.description,
          tasks: projectContext.tasks,
      });
      const result = await aiService.ask(currentInput, context);
      const aiMessage = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: result.answer,
      };
      setMessages((prev) => [...prev, aiMessage]);
    } catch (error) {
      console.error('Failed to get AI response:', error);
      const errorMessage = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: 'Sorry, I encountered an error. Please try again.',
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, x: 400 }}
        animate={{ opacity: 1, x: 0 }}
        exit={{ opacity: 0, x: 400 }}
        className="fixed bottom-0 right-0 top-0 w-96 bg-white border-l border-border shadow-2xl flex flex-col z-40"
      >
        <div className="flex items-center justify-between p-4 border-b border-border">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center">
              <Sparkles className="w-5 h-5 text-white" />
            </div>
            <h3 className="font-semibold">AI Assistant</h3>
          </div>
          <motion.button
            whileHover={{ rotate: 90 }}
            onClick={onClose}
            className="p-1 hover:bg-muted rounded transition-colors"
          >
            <X className="w-5 h-5" />
          </motion.button>
        </div>

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs px-4 py-2 rounded-lg whitespace-pre-wrap ${
                  message.type === 'user'
                    ? 'bg-primary text-primary-foreground'
                    : 'bg-muted text-foreground'
                }`}
              >
                <p className="text-sm">{message.content}</p>
              </div>
            </motion.div>
          ))}
          {isLoading && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="flex justify-start">
              <div className="bg-muted px-4 py-2 rounded-lg">
                <div className="flex gap-1">
                  <motion.div
                    animate={{ y: [0, -4, 0] }}
                    transition={{ duration: 0.6, repeat: Infinity }}
                    className="w-2 h-2 bg-muted-foreground rounded-full"
                  />
                  <motion.div
                    animate={{ y: [0, -4, 0] }}
                    transition={{ duration: 0.6, repeat: Infinity, delay: 0.1 }}
                    className="w-2 h-2 bg-muted-foreground rounded-full"
                  />
                  <motion.div
                    animate={{ y: [0, -4, 0] }}
                    transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                    className="w-2 h-2 bg-muted-foreground rounded-full"
                  />
                </div>
              </div>
            </motion.div>
          )}
           <div ref={messagesEndRef} />
        </div>

        <form onSubmit={handleSendMessage} className="p-4 border-t border-border">
          <div className="flex gap-2">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Ask about this project..."
              className="flex-1 px-3 py-2 bg-muted border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-sm"
              disabled={isLoading}
            />
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              type="submit"
              disabled={isLoading || !input.trim()}
              className="p-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-4 h-4" />
            </motion.button>
          </div>
        </form>
      </motion.div>
    </AnimatePresence>
  );
}



src\components\ai\ColumnSummarizer.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { Sparkles, X } from 'lucide-react';
import { useState } from 'react';
import { aiService } from '../../api/aiService';

export default function ColumnSummarizer({ columnTitle, tasks, onClose }) {
  const [summary, setSummary] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleSummarize = async () => {
    setIsLoading(true);
    setError(null);
    setSummary(null);
    try {
      const projectData = {
        name: `Tasks in "${columnTitle}" column`,
        description: `This is a summary for the tasks currently in the "${columnTitle}" status.`,
        tasks: tasks.map((t) => ({ title: t.title, description: t.description, status: t.status })),
      };
      const result = await aiService.summarizeProject(projectData);
      setSummary(result.summary);
    } catch (err) {
      setError('Failed to generate summary. Please try again.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="absolute top-12 right-0 w-80 bg-violet-50 border border-border rounded-xl shadow-xl p-4 z-40"
      >
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-blue-500" />
            <h3 className="font-semibold text-sm">AI Summary</h3>
          </div>
          <motion.button
            whileHover={{ rotate: 90 }}
            onClick={onClose}
            className="p-1 hover:bg-muted rounded transition-colors"
          >
            <X className="w-4 h-4" />
          </motion.button>
        </div>

        {error && <p className="text-sm text-destructive mb-3">{error}</p>}

        {!summary ? (
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            onClick={handleSummarize}
            disabled={isLoading}
            className="w-full px-3 py-2 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-lg font-medium hover:shadow-lg transition-all disabled:opacity-50"
          >
            {isLoading ? (
              <div className="flex items-center justify-center gap-2">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}
                  className="w-4 h-4 border-2 border-white border-t-transparent rounded-full"
                />
                Summarizing...
              </div>
            ) : (
              `Summarize "${columnTitle}"`
            )}
          </motion.button>
        ) : (
          <motion.div initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }} className="space-y-3">
            <p className="text-sm text-foreground leading-relaxed whitespace-pre-wrap">{summary}</p>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleSummarize}
              disabled={isLoading}
              className="w-full px-3 py-2 border border-border rounded-lg text-sm font-medium hover:bg-muted transition-colors"
            >
              {isLoading ? 'Regenerating...' : 'Get Another Summary'}
            </motion.button>
          </motion.div>
        )}
      </motion.div>
    </AnimatePresence>
  );
}



src\components\kanban\KanbanColumn.jsx
/* code of this file */

// src/components/kanban/KanbanColumn.jsx
import { motion } from 'framer-motion';
import { Plus, MoreVertical, Sparkles, X, Edit2 } from 'lucide-react';
import { Draggable } from '@hello-pangea/dnd';
import { useState, useRef, useEffect } from 'react';
import ColumnSummarizer from '../ai/ColumnSummarizer';

export default function KanbanColumn({
  column,
  onAddTask,
  onEditTask,
  onDeleteTask,
  onRenameColumn, // ADDED: Prop to handle renaming
}) {
  const [showSummarizer, setShowSummarizer] = useState(false);
  // ADDED: State to manage the column options dropdown
  const [showOptions, setShowOptions] = useState(false);
  // ADDED: State to manage when the column is in editing mode
  const [isEditing, setIsEditing] = useState(false);
  const [newTitle, setNewTitle] = useState(column.title);
  const inputRef = useRef(null);

  const colorMap = {
    'To Do': 'bg-blue-500/10 border-blue-500/20',
    'In Progress': 'bg-amber-500/10 border-amber-500/20',
    'Done': 'bg-green-500/10 border-green-500/20',
  };
  const titleColorMap = {
    'To Do': 'text-blue-600 dark:text-blue-400',
    'In Progress': 'text-amber-600 dark:text-amber-400',
    'Done': 'text-green-600 dark:text-green-400',
  };
  
  // ADDED: Focus the input when editing starts
  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
      inputRef.current.select();
    }
  }, [isEditing]);
  
  // ADDED: Handler to save the new column title
  const handleRename = () => {
    if (newTitle.trim() && newTitle.trim() !== column.title) {
      onRenameColumn(column.id, newTitle.trim());
    }
    setIsEditing(false);
    setShowOptions(false);
  };
  
  // ADDED: Handler for keyboard events in the input
  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      handleRename();
    } else if (e.key === 'Escape') {
      setNewTitle(column.title);
      setIsEditing(false);
      setShowOptions(false);
    }
  };


  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex flex-col h-full rounded-xl border ${colorMap[column.id] || 'bg-muted/50 border-border'} relative`}
    >
      <div className="p-4 border-b border-border/50">
        <div className="flex items-center justify-between mb-3">
          {isEditing ? (
            <input
              ref={inputRef}
              type="text"
              value={newTitle}
              onChange={(e) => setNewTitle(e.target.value)}
              onBlur={handleRename}
              onKeyDown={handleKeyDown}
              className="font-semibold bg-transparent border-b-2 border-primary focus:outline-none w-full"
            />
          ) : (
            <h3 className={`font-semibold ${titleColorMap[column.id] || 'text-foreground'}`}>{column.title}</h3>
          )}

          <div className="flex items-center gap-1 relative">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowSummarizer(!showSummarizer)}
              className="p-1 rounded hover:bg-muted/50 transition-colors text-muted-foreground hover:text-foreground"
              title="Summarize with AI"
            >
              <Sparkles className="w-4 h-4" />
            </motion.button>
            {/* ADDED: Logic for the column options menu */}
            <motion.button
              whileHover={{ rotate: 90 }}
              onClick={() => setShowOptions(!showOptions)}
              className="p-1 rounded hover:bg-muted/50 transition-colors"
            >
              <MoreVertical className="w-4 h-4 text-muted-foreground" />
            </motion.button>
            {showOptions && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="absolute top-full right-0 mt-2 w-32 bg-violet-50 border border-border rounded-lg shadow-lg z-20"
              >
                <button
                  onClick={() => { setIsEditing(true); setShowOptions(false); }}
                  className="w-full flex items-center gap-2 px-3 py-2 text-sm hover:bg-muted"
                >
                  <Edit2 className="w-3 h-3" /> Rename
                </button>
              </motion.div>
            )}
          </div>
        </div>
        <p className="text-xs text-muted-foreground">{column.tasks.length} tasks</p>
      </div>

      <div className="flex-1 overflow-y-auto p-3 space-y-3">
        {column.tasks.map((task, index) => (
          <Draggable key={task._id} draggableId={task._id} index={index}>
            {(provided, snapshot) => (
              <motion.div
                ref={provided.innerRef}
                {...provided.draggableProps}
                {...provided.dragHandleProps}
                whileHover={{ y: -2 }}
                onClick={() => onEditTask(task)}
                className={`p-3 rounded-lg bg-card border border-border cursor-grab active:cursor-grabbing transition-all group ${
                  snapshot.isDragging ? 'shadow-lg ring-2 ring-primary' : ''
                }`}
              >
                <div className="flex items-start justify-between gap-2">
                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium text-sm mb-1 group-hover:text-primary transition-colors">
                      {task.title}
                    </h4>
                    <p className="text-xs text-muted-foreground line-clamp-2">{task.description}</p>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    onClick={(e) => {
                      e.stopPropagation();
                      onDeleteTask(task._id);
                    }}
                    className="opacity-0 group-hover:opacity-100 p-1 text-muted-foreground hover:text-destructive transition-all"
                  >
                    <X className="w-3 h-3" />
                  </motion.button>
                </div>
              </motion.div>
            )}
          </Draggable>
        ))}
      </div>

      <div className="p-3 border-t border-border/50">
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={onAddTask}
          className="w-full flex items-center justify-center gap-2 px-3 py-2 rounded-lg border border-dashed border-border/50 text-muted-foreground hover:text-foreground hover:border-foreground/50 transition-colors"
        >
          <Plus className="w-4 h-4" />
          <span className="text-sm font-medium">Add Task</span>
        </motion.button>
      </div>

      {showSummarizer && (
        <ColumnSummarizer
          columnTitle={column.title}
          tasks={column.tasks}
          onClose={() => setShowSummarizer(false)}
        />
      )}
    </motion.div>
  );
}



src\components\layout\Sidebar.jsx
/* code of this file */

// src/components/layout/Sidebar.jsx
import { motion } from 'framer-motion';
import { Plus } from 'lucide-react';
import { useState, useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { projectService } from '../../api/projectService';
import { useApp } from '../../context/AppContext';

export default function Sidebar({ onNewProject }) {
  const { projects, setProjects } = useApp();
  const [isLoading, setIsLoading] = useState(true);
  const { projectId: selectedProjectId } = useParams(); // Get the active project ID from the URL

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        setIsLoading(true);
        const fetchedProjects = await projectService.getAll();
        setProjects(fetchedProjects);
      } catch (error) {
        console.error('Failed to fetch projects:', error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchProjects();
  }, [setProjects]);

  return (
    <motion.aside
      initial={{ x: -280 }}
      animate={{ x: 0 }}
      className="w-72 bg-card border-r border-border flex flex-col"
    >
      <div className="p-6 border-b border-border">
        <Link to="/projects">
          <h1 className="text-xl font-bold">Kanban Pro</h1>
        </Link>
      </div>

      <div className="flex-1 overflow-y-auto p-4">
        <div className="mb-4">
          <h2 className="text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-3">
            Projects
          </h2>
          <div className="space-y-2">
            {isLoading ? (
              <p className="text-sm text-muted-foreground">Loading projects...</p>
            ) : (
              projects.map((project) => (
                <Link to={`/projects/${project._id}`} key={project._id}>
                  <motion.div
                    whileHover={{ x: 4 }}
                    className={`w-full text-left px-3 py-2 rounded-lg transition-colors ${
                      selectedProjectId === project._id
                        ? 'bg-primary/20 text-primary'
                        : 'text-foreground hover:bg-muted'
                    }`}
                  >
                    <span className="text-sm font-medium truncate">{project.name}</span>
                  </motion.div>
                </Link>
              ))
            )}
          </div>
        </div>
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={onNewProject}
          className="w-full flex items-center justify-center gap-2 px-3 py-2 rounded-lg border border-dashed border-border text-muted-foreground hover:text-foreground hover:border-foreground transition-colors"
        >
          <Plus className="w-4 h-4" />
          <span className="text-sm font-medium">New Project</span>
        </motion.button>
      </div>
      <div className="p-4 border-t border-border">{/* ... User Profile ... */}</div>
    </motion.aside>
  );
}



src\components\modals\ProjectModal.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { useState, useEffect } from 'react';

export default function ProjectModal({ project, onClose, onSave }) {
  const [formData, setFormData] = useState({ name: '', description: '' });
  useEffect(() => {
    if (project) {
      setFormData({ name: project.name, description: project.description });
    }
  }, [project]);
  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({ ...formData, created: new Date().toISOString() });
  };
  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
        // FIX: Ensured the z-index is the highest to be on top of everything.
        className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]"
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.95, opacity: 0 }}
          onClick={(e) => e.stopPropagation()}
          // FIX: Replaced 'bg-card' with 'bg-background' to ensure a solid, non-transparent background.
          className="bg-violet-50 border border-border rounded-xl shadow-xl w-full max-w-md p-6"
        >
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold">{project ? 'Edit Project' : 'New Project'}</h2>
            <motion.button
              whileHover={{ rotate: 90 }}
              onClick={onClose}
              className="p-1 hover:bg-muted rounded transition-colors"
            >
              <X className="w-5 h-5" />
            </motion.button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Project Name</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="Enter project name"
                className="w-full px-3 py-2 bg-muted border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Enter project description"
                rows={3}
                className="w-full px-3 py-2 bg-muted border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none"
              />
            </div>

            <div className="flex gap-3 pt-4">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="submit"
                className="flex-1 px-4 py-2 bg-primary text-primary-foreground rounded-lg font-medium hover:bg-primary/90 transition-colors"
              >
                {project ? 'Update' : 'Create'}
              </motion.button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}



src\components\modals\TaskModal.jsx
/* code of this file */

import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import { useState, useEffect } from 'react';

export default function TaskModal({ task, onClose, onSave }) {
  const [formData, setFormData] = useState({ title: '', description: '' });
  useEffect(() => {
    if (task) {
      setFormData({ title: task.title, description: task.description });
    }
  }, [task]);
  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };
  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        onClick={onClose}
        // FIX: Ensured the z-index is the highest to be on top of everything.
        className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]"
      >
        <motion.div
          initial={{ scale: 0.95, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          exit={{ scale: 0.95, opacity: 0 }}
          onClick={(e) => e.stopPropagation()}
          // FIX: Replaced 'bg-card' with 'bg-background' to ensure a solid, non-transparent background.
          className="bg-violet-50 border border-border rounded-xl shadow-xl w-full max-w-md p-6"
        >
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold">{task ? 'Edit Task' : 'New Task'}</h2>
            <motion.button
              whileHover={{ rotate: 90 }}
              onClick={onClose}
              className="p-1 hover:bg-muted rounded transition-colors"
            >
              <X className="w-5 h-5" />
            </motion.button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Task Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                placeholder="Enter task title"
                className="w-full px-3 py-2 bg-muted border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="Enter task description"
                rows={3}
                className="w-full px-3 py-2 bg-muted border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none"
              />
            </div>

            <div className="flex gap-3 pt-4">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="button"
                onClick={onClose}
                className="flex-1 px-4 py-2 border border-border rounded-lg hover:bg-muted transition-colors"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                type="submit"
                className="flex-1 px-4 py-2 bg-primary text-primary-foreground rounded-lg font-medium hover:bg-primary/90 transition-colors"
              >
                {task ? 'Update' : 'Create'}
              </motion.button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}



src\context\AppContext.jsx
/* code of this file */

// src/context/AppContext.jsx
import { createContext, useContext, useState } from 'react';

const AppContext = createContext();

export const useApp = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within AppProvider');
  }
  return context;
};

export const AppProvider = ({ children }) => {
  const [projects, setProjects] = useState([]);
  const [toast, setToast] = useState(null);

  const showToast = (message, type = 'success') => {
    setToast({ message, type });
    setTimeout(() => setToast(null), 3000);
  };

  const value = {
    projects,
    setProjects,
    toast,
    showToast,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};



src\pages\KanbanPage.jsx
/* code of this file */

// src/pages/KanbanPage.jsx
import { motion } from 'framer-motion';
import { Plus, ChevronLeft, Sparkles } from 'lucide-react';
import { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { DragDropContext, Droppable } from '@hello-pangea/dnd';
import KanbanColumn from '../components/kanban/KanbanColumn';
import TaskModal from '../components/modals/TaskModal';
import AIPanel from '../components/ai/AIPanel';
import { projectService } from '../api/projectService';
import { taskService } from '../api/taskService';
import { useApp } from '../context/AppContext';

// The hardcoded titles are now just fallbacks. The actual title will come from the project data.
const COLUMN_CONFIG = {
  'To Do': { title: 'To Do' },
  'In Progress': { title: 'In Progress' },
  'Done': { title: 'Done' },
};


export default function KanbanPage() {
  const { projectId } = useParams();
  const navigate = useNavigate();
  const [project, setProject] = useState(null);
  const [columns, setColumns] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [selectedColumnId, setSelectedColumnId] = useState('');
  const [showAIPanel, setShowAIPanel] = useState(false);
  const { showToast } = useApp();

  const fetchProjectData = useCallback(async () => {
    try {
      if (!projectId) return;
      setIsLoading(true);
      const fetchedProject = await projectService.getById(projectId, true);
      setProject(fetchedProject);
      const tasks = fetchedProject.tasks || [];
      
      // Initialize columns from the config
      const initialColumns = {};
      Object.keys(COLUMN_CONFIG).forEach(key => {
        initialColumns[key] = {
          id: key,
          // Use the title from project data if it exists, otherwise use the fallback
          title: fetchedProject.columnNames?.[key] || COLUMN_CONFIG[key].title,
          tasks: []
        };
      });

      tasks.forEach((task) => {
        if (initialColumns[task.status]) {
          initialColumns[task.status].tasks.push(task);
        }
      });

      Object.values(initialColumns).forEach((col) => {
        col.tasks.sort((a, b) => a.order - b.order);
      });

      setColumns(initialColumns);
    } catch (error) {
      showToast(`Failed to load project: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  }, [projectId, showToast]);

  useEffect(() => {
    fetchProjectData();
  }, [fetchProjectData]);

  // ADDED: Handler to process column renaming
  const handleRenameColumn = async (columnId, newTitle) => {
    const oldTitle = columns[columnId].title;
    // Optimistically update the UI
    const updatedColumns = {
      ...columns,
      [columnId]: { ...columns[columnId], title: newTitle },
    };
    setColumns(updatedColumns);

    try {
      // Update the project on the backend
      const currentColumnNames = project.columnNames || {
        'To Do': 'To Do',
        'In Progress': 'In Progress',
        'Done': 'Done',
      };
      const newColumnNames = { ...currentColumnNames, [columnId]: newTitle };
      await projectService.update(projectId, { columnNames: newColumnNames });
      showToast('Column renamed!');
    } catch (error) {
      showToast(`Failed to rename column: ${error.message}`, 'error');
      // Revert on error
      const revertedColumns = {
        ...columns,
        [columnId]: { ...columns[columnId], title: oldTitle },
      };
      setColumns(revertedColumns);
    }
  };

  const handleDragEnd = async (result) => {
    const { source, destination, draggableId } = result;
    if (!destination) return;
    if (source.droppableId === destination.droppableId && source.index === destination.index) {
      return;
    }

    const startCol = columns[source.droppableId];
    const endCol = columns[destination.droppableId];
    const originalColumns = JSON.parse(JSON.stringify(columns));

    const startTasks = Array.from(startCol.tasks);
    const [movedTask] = startTasks.splice(source.index, 1);
    
    if (startCol === endCol) {
      startTasks.splice(destination.index, 0, movedTask);
      const reorderedTasks = startTasks.map((task, index) => ({ ...task, order: index }));
      const newColumns = {
        ...columns,
        [startCol.id]: { ...startCol, tasks: reorderedTasks },
      };
      setColumns(newColumns);
    } else {
      const endTasks = Array.from(endCol.tasks);
      endTasks.splice(destination.index, 0, { ...movedTask, status: endCol.id });
      const newStartTasks = startTasks.map((task, index) => ({ ...task, order: index }));
      const newEndTasks = endTasks.map((task, index) => ({ ...task, order: index }));
      const newColumns = {
        ...columns,
        [startCol.id]: { ...startCol, tasks: newStartTasks },
        [endCol.id]: { ...endCol, tasks: newEndTasks },
      };
      setColumns(newColumns);
    }

    try {
      await taskService.update(draggableId, {
        status: destination.droppableId,
        order: destination.index,
      });
    } catch (error) {
      showToast(`Failed to move task: ${error.message}`, 'error');
      setColumns(originalColumns);
    }
  };
  const handleSaveTask = async (data) => {
    try {
      if (selectedTask) {
        await taskService.update(selectedTask._id, data);
        showToast('Task updated!');
      } else {
        await projectService.createTask(projectId, { ...data, status: selectedColumnId });
        showToast('Task created!');
      }
      fetchProjectData();
    } catch (error) {
      showToast(`Failed to save task: ${error.message}`, 'error');
    } finally {
      setShowTaskModal(false);
      setSelectedTask(null);
    }
  };
  const handleDeleteTask = async (taskId) => {
    if (window.confirm('Are you sure you want to delete this task?')) {
      try {
        await taskService.delete(taskId);
        showToast('Task deleted!');
        fetchProjectData();
      } catch (error) {
        showToast(`Failed to delete task: ${error.message}`, 'error');
      }
    }
  };

  const handleOpenCreateModal = (columnId) => {
    setSelectedColumnId(columnId);
    setSelectedTask(null);
    setShowTaskModal(true);
  };
  const handleOpenEditModal = (task) => {
    setSelectedTask(task);
    setShowTaskModal(true);
  };

  if (isLoading) {
    return <div className="flex items-center justify-center h-full text-muted-foreground">Loading Project Board...</div>;
  }
  
  if (!project) {
     return <div className="flex items-center justify-center h-full text-destructive">Could not load project. Please go back and try again.</div>;
  }

  return (
    <div className="h-full flex flex-col bg-background">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center justify-between p-6 border-b border-border"
      >
        <div className="flex items-center gap-4">
          <motion.button
            whileHover={{ x: -4 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => navigate('/projects')}
            className="p-2 hover:bg-muted rounded-lg transition-colors"
          >
            <ChevronLeft className="w-5 h-5" />
          </motion.button>
          <div>
            <h1 className="text-2xl font-bold">{project.name}</h1>
            <p className="text-sm text-muted-foreground">Manage tasks and track progress</p>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => setShowAIPanel(!showAIPanel)}
            className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-lg font-medium hover:shadow-lg transition-all"
          >
            <Sparkles className="w-4 h-4" />
            AI Assistant
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => handleOpenCreateModal(Object.keys(COLUMN_CONFIG)[0])} // Default to the first column
            className="flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg font-medium hover:bg-primary/90 transition-colors"
          >
            <Plus className="w-4 h-4" />
            New Task
          </motion.button>
        </div>
      </motion.div>

      <div className="flex-1 overflow-x-auto p-6">
        <DragDropContext onDragEnd={handleDragEnd}>
          <div className="flex gap-6 min-w-min h-full">
            {columns && Object.values(columns).map((column, index) => (
              <Droppable key={column.id} droppableId={column.id}>
                {(provided) => (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                    className="flex-shrink-0 w-96 transition-colors h-full"
                  >
                    <KanbanColumn
                      column={column}
                      onAddTask={() => handleOpenCreateModal(column.id)}
                      onEditTask={(task) => handleOpenEditModal(task)}
                      onDeleteTask={handleDeleteTask}
                      onRenameColumn={handleRenameColumn} // Pass the handler down
                    />
                    {provided.placeholder}
                  </motion.div>
                )}
              </Droppable>
            ))}
          </div>
        </DragDropContext>
      </div>

      {showTaskModal && (
        <TaskModal task={selectedTask} onClose={() => setShowTaskModal(false)} onSave={handleSaveTask} />
      )}
      
      {showAIPanel && <AIPanel projectContext={project} onClose={() => setShowAIPanel(false)} />}
    </div>
  );
}



src\pages\ProjectsPage.jsx
/* code of this file */

// src/pages/ProjectsPage.jsx
import { motion } from 'framer-motion';
import { MoreVertical, Calendar, FileText, Trash2, Edit2 } from 'lucide-react';
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { projectService } from '../api/projectService';
import { useApp } from '../context/AppContext';

export default function ProjectsPage({ onEditProject }) {
  const { projects, setProjects, showToast } = useApp();
  const [isLoading, setIsLoading] = useState(true);
  const [showMenu, setShowMenu] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        // We fetch a lightweight version of projects for this page.
        const fetchedProjects = await projectService.getAll(true);
        setProjects(fetchedProjects);
      } catch (error) {
        showToast(`Failed to load projects: ${error.message}`, 'error');
      } finally {
        setIsLoading(false);
      }
    };
    fetchProjects();
  }, [setProjects, showToast]);

  const handleDeleteProject = async (id) => {
    setShowMenu(null);
    if (window.confirm('Are you sure you want to delete this project and all its tasks?')) {
      try {
        await projectService.delete(id);
        setProjects(projects.filter((p) => p._id !== id));
        showToast('Project deleted successfully!');
      } catch (error) {
        showToast(`Error: ${error.message}`, 'error');
      }
    }
  };

  const handleOpenEditModal = (project) => {
    onEditProject(project);
    setShowMenu(null);
  };
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };
  return (
    <div className="h-full overflow-y-auto bg-background">
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="sticky top-0 bg-background/95 backdrop-blur border-b border-border p-6 z-10"
      >
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Projects</h1>
            <p className="text-muted-foreground mt-1">Select a project or create a new one</p>
          </div>
        </div>
      </motion.div>

      <div className="p-6">
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
             <p className="text-muted-foreground">Loading projects...</p>
          </div>
        ) : (
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          >
            {projects.map((project) => (
              <motion.div
                key={project._id}
                variants={itemVariants}
                whileHover={{ y: -4 }}
                onClick={() => navigate(`/projects/${project._id}`)}
                className="group bg-card border border-border rounded-xl p-6 cursor-pointer hover:border-primary/50 transition-all relative"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1 min-w-0 pr-8">
                    <h3 className="text-lg font-semibold group-hover:text-primary transition-colors truncate">
                      {project.name}
                    </h3>
                    <p className="text-sm text-muted-foreground mt-1 line-clamp-2">
                      {project.description || 'No description provided.'}
                    </p>
                  </div>
                  <div className="relative">
                    <motion.button
                      whileHover={{ rotate: 90 }}
                      onClick={(e) => {
                        e.stopPropagation();
                        setShowMenu(showMenu === project._id ? null : project._id);
                      }}
                      className="p-2 rounded-lg hover:bg-muted text-muted-foreground hover:text-foreground transition-colors"
                    >
                      <MoreVertical className="w-4 h-4" />
                    </motion.button>
                    {showMenu === project._id && (
                      <motion.div
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -10 }}
                        // FIX: Replaced 'bg-card' with 'bg-background' to ensure a solid background.
                        className="absolute top-full right-0 mt-2 w-48 bg-violet-50 border border-border rounded-lg shadow-lg z-50"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <motion.button
                          whileHover={{ x: 4 }}
                          onClick={(e) => { e.stopPropagation(); handleOpenEditModal(project); }}
                          className="w-full flex items-center gap-2 px-4 py-2 text-sm hover:bg-muted transition-colors text-left"
                        >
                          <Edit2 className="w-4 h-4" /> Edit
                        </motion.button>
                        <motion.button
                          whileHover={{ x: 4 }}
                          onClick={(e) => { e.stopPropagation(); handleDeleteProject(project._id); }}
                          className="w-full flex items-center gap-2 px-4 py-2 text-sm hover:bg-destructive/10 text-destructive transition-colors text-left"
                        >
                          <Trash2 className="w-4 h-4" /> Delete
                        </motion.button>
                      </motion.div>
                    )}
                  </div>
                </div>
                <div className="flex items-center justify-between pt-4 border-t border-border">
                  <div className="flex items-center gap-4 text-xs text-muted-foreground">
                    <div className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      {new Date(project.createdAt).toLocaleDateString()}
                    </div>
                    <div className="flex items-center gap-1">
                      <FileText className="w-4 h-4" />
                       {/* taskCount is now a property of the project object */}
                      {`${project.taskCount ?? 0} tasks`}
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>
        )}
      </div>
    </div>
  );
}



src\App.css
/* code of this file */




src\App.jsx
/* code of this file */

// src/App.jsx
import { useState } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import Sidebar from './components/layout/Sidebar';
import ProjectsPage from './pages/ProjectsPage';
import KanbanPage from './pages/KanbanPage';
import { AppProvider, useApp } from './context/AppContext';
import ProjectModal from './components/modals/ProjectModal';
import { projectService } from './api/projectService';

function AppContent() {
  const { projects, setProjects, showToast } = useApp();
  const [isProjectModalOpen, setIsProjectModalOpen] = useState(false);
  const [editingProject, setEditingProject] = useState(null);

  const handleOpenProjectModal = (project = null) => {
    setEditingProject(project);
    setIsProjectModalOpen(true);
  };

  const handleCloseProjectModal = () => {
    setIsProjectModalOpen(false);
    setEditingProject(null);
  };

  const handleSaveProject = async (formData) => {
    try {
      if (editingProject) {
        const updatedProject = await projectService.update(editingProject._id, formData);
        setProjects(projects.map((p) => (p._id === editingProject._id ? updatedProject : p)));
        showToast('Project updated successfully!');
      } else {
        const newProject = await projectService.create(formData);
        setProjects([...projects, newProject]);
        showToast('Project created successfully!');
      }
    } catch (error) {
      showToast(`Error: ${error.message}`, 'error');
    } finally {
      handleCloseProjectModal();
    }
  };

  return (
    <>
      <div className="flex h-screen bg-background text-foreground">
        <Sidebar onNewProject={() => handleOpenProjectModal()} />
        <main className="flex-1 overflow-hidden">
          <Routes>
            <Route path="/" element={<Navigate to="/projects" replace />} />
            <Route
              path="/projects"
              element={<ProjectsPage onEditProject={handleOpenProjectModal} />}
            />
            <Route path="/projects/:projectId" element={<KanbanPage />} />
          </Routes>
        </main>
      </div>
      {isProjectModalOpen && (
        <ProjectModal
          project={editingProject}
          onClose={handleCloseProjectModal}
          onSave={handleSaveProject}
        />
      )}
    </>
  );
}

function App() {
  return (
    <AppProvider>
      <AppContent />
    </AppProvider>
  );
}

export default App;



src\index.css
/* code of this file */

@import "tailwindcss";

/* 
:root {
  --color-background: 255 255 255;
  --color-foreground: 10 10 10;
  --color-card: 255 255 255;
  --color-muted: 244 244 245;
  --color-muted-foreground: 113 113 122;
  --color-border: 228 228 231;
  --color-primary: 59 130 246;
  --color-primary-foreground: 255 255 255;
  --color-destructive: 239 68 68;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: 10 10 10;
    --color-foreground: 250 250 250;
    --color-card: 24 24 27;
    --color-muted: 39 39 42;
    --color-muted-foreground: 161 161 170;
    --color-border: 39 39 42;
    --color-primary: 59 130 246;
    --color-primary-foreground: 255 255 255;
    --color-destructive: 239 68 68;
  }
}

* {
  border-color: rgb(var(--color-border));
}

body {
  background-color: rgb(var(--color-background));
  color: rgb(var(--color-foreground));
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.bg-background { background-color: rgb(var(--color-background)); }
.bg-foreground { background-color: rgb(var(--color-foreground)); }
.bg-card { background-color: rgb(var(--color-card)); }
.bg-muted { background-color: rgb(var(--color-muted)); }
.bg-primary { background-color: rgb(var(--color-primary)); }

.text-background { color: rgb(var(--color-background)); }
.text-foreground { color: rgb(var(--color-foreground)); }
.text-card { color: rgb(var(--color-card)); }
.text-muted-foreground { color: rgb(var(--color-muted-foreground)); }
.text-primary { color: rgb(var(--color-primary)); }
.text-primary-foreground { color: rgb(var(--color-primary-foreground)); }
.text-destructive { color: rgb(var(--color-destructive)); }

.border-border { border-color: rgb(var(--color-border)); }
.border-primary { border-color: rgb(var(--color-primary)); }

.hover\:bg-muted:hover { background-color: rgb(var(--color-muted)); }
.hover\:bg-primary\/90:hover { background-color: rgb(var(--color-primary) / 0.9); }
.hover\:text-foreground:hover { color: rgb(var(--color-foreground)); }
.hover\:text-primary:hover { color: rgb(var(--color-primary)); }
.hover\:text-destructive:hover { color: rgb(var(--color-destructive)); }
.hover\:border-primary\/50:hover { border-color: rgb(var(--color-primary) / 0.5); }
.hover\:border-foreground\/50:hover { border-color: rgb(var(--color-foreground) / 0.5); }

.ring-primary { --tw-ring-color: rgb(var(--color-primary)); }
.focus\:ring-primary:focus { --tw-ring-color: rgb(var(--color-primary)); } */




src\main.jsx
/* code of this file */

// src/main.jsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </StrictMode>,
)



eslint.config.js
/* code of this file */

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])




index.html
/* code of this file */

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>client</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>




package.json
/* code of this file */

{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hello-pangea/dnd": "^18.0.1",
    "@tailwindcss/vite": "^4.1.14",
    "axios": "^1.12.2",
    "framer-motion": "^12.23.24",
    "lucide-react": "^0.546.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.9.4",
    "tailwindcss": "^4.1.14"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "vite": "^7.1.7"
  }
}




vite.config.js
/* code of this file */

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
})




